\section{Introduction}
\textit{Checksims} is an application that searches for similar submissions in
academic assignments. The purpose is to flag certain pairs of assignments for
review by graders, allowing course staff to identify and handle cases of
academic dishonesty. Checksims now includes a GUI with similar functionality to
the command line interface. Using this GUI, you are able to select submissions,
remove any common code for the assignment, compare with archives of previous
years' submissions, select a comparison method that fits your needs, and
interactively view the results of the comparisons.


\section{Running Checksims}

\textit{Checksims} requires a modern Java Runtime Environment. To start the
\textit{Checksims} GUI, execute the \texttt{.jar} file provided. To test
assignments for similarities, you must first select all included submissions,
common code, and submission archives. Once you have selected your options, you
can begin the comparison. To add a submission directory, an archive directory,
or a common code directory, click the associated button. It will add a new box
where you can select a \textit{Turnin} zip file or directory for submissions or
archives, or a directory for your common code. You may have an arbitrary number
of each category. All listed submissions, archives, and common code directories
will be included in the comparison. You must also select a comparison method.
The UI includes a help mode, which can be activated by clicking on the
`Enable Help' button.

\begin{figure}
  \label{fig:menu}
  \includegraphics[width=\textwidth,height=\textheight,keepaspectratio]{./img/menu.png}
  \caption{The (empty) \textit{Checksims} menu screen.}
\end{figure}

\subsection{Submissions}
\textit{Checksims} supports a number of submission and archive formats. The
primary format is an assignment directory. Every subdirectory is counted as an
independent submission, and every file in the subdirectories are recursively
concatenated together to form the submission. If you are using one of the AST
based comparison methods, only files with the appropriate source file extensions
will be considered. Submissions may also be in the form of a \textit{Turnin}
assignment archive. These are ZIP files with a particular directory structure.

\subsection{Archives}
Archives are the same as submissions, but they are not checked for similarity.
In other words, every submission will be compared to every other submission and
every archive submission, but the archive submissions will not be compared to
each other. This is useful when testing if any students may have copied sections
from a submission in a previous year. Archives take the same format as
submissions, but are treated differently by \textit{Checksims}.

\subsection{Common Code}
Many assignments have starter code, or code that is common between all of the
submissions. Removing common code is not necessary, but it can make the
distinction between similar and dissimilar submissions more stark. To use common
code removal, place all common code for an assignment into a single directory,
and select that directory for common code removal in the main menu.

\subsection{Comparison Methods}
\textit{Checksims} provides a number of methods for comparing assignments.
There are two primary categories: token based and AST based comparison methods.
Token based methods parse a submission into a sequence of tokens. Tokens may be
the individual characters, whitespace separated words, or lines of a file. AST
based methods parse each file into a an Abstract Syntax Tree before comparison.
Because of this , token based methods do not depend on any particular language,
while AST based methods must be used on their target languages. Token based
methods are not be as capable in detecting language based obfuscation methods.
AST methods are language specific, and will fail if given an invalid
assignment. They are, however, much more capable in detecting language based
obfuscation methods.

There are two token based methods available in \textit{Checksims}. The first is
\textit{linecompare}, which searches for identical lines in each file. This is
the least robust method, but is extremely efficient. The next token based method
is \textit{Smith-Waterman}, a sequence alignment algorithm typically used in
analyzing genome data. This method has a high memory requirement, but is more
robust than \textit{linecompare}.

\textit{Checksims} provides four AST based comparison algorithms. All methods
first parse the language dependent submission into a language independent syntax
tree. If the submission uses invalid syntax, it may not be parsed correctly, and
comparison will fail. The four methods are \textit{cparser}, \textit{cppparser},
\textit{javaparser}, and \textit{pythonparser}.

\section{Interpreting and Filtering Results}
Once \textit{Checksims} has finished comparing the submissions, you will see a
screen like the one below. This presents a similarity matrix and some controls.
The controls on the left allow you to set a threshold similarity, search for
students by name, and print the results in a number of formats.


\begin{figure}
  \label{fig:results}
  \includegraphics[width=\textwidth,height=\textheight,keepaspectratio]{./img/results.png}
  \caption{An example of the results screen. Shows the similarity matrix on the
    right and controls on the left.}
\end{figure}

The region on the right shows a grid of similarity ratings. All numbers are the
percent similarity score between two submissions. Each row and each column
represents a single submission, and each box represents the score similarity
score when comparing the row submission to the column submission. The main
diagonal of the matrix is blank, as each submission need not be compared to
itself. To inspect a pair in more detail, click on the box. You will see some
basic information about the pair of submission, including the submission
lengths, their similarity, and their cross similarity scores. If you do not see
any submissions, there were either no valid submissions, or there were no scores
above the threshold defined in the left panel.

The left panel provides three controls. The threshold hides any submissions that
have no similarity ratings above a certain number. This is useful when filtering
out dissimilar submissions. The second control provides two textboxes. Each
textbox takes a partial name and highlights any submissions under that name. For
instance, if you want to compare Alice and Bob, you can type their names into
the respective boxes. All students with the names Alice and Bob will be brought
to the front and highlighted, so you may review their similarity scores. The
third control allows you to export the results in a number of formats. You may
export an HTML document with the entire similarity matrix and simple formatting,
you may export the results as a CSV file, or you may export a text file
naming all pairs with a score greater than 70\%.
